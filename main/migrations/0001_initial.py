# Generated by Django 5.2.6 on 2025-09-19 07:59

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('thematic_expert', 'Thematic Expert'), ('master_trainer', 'Master Trainer'), ('admin', 'Admin')], default='master_trainer', max_length=20)),
                ('mobile', models.CharField(blank=True, db_index=True, max_length=20, null=True, unique=True, verbose_name='Mobile number')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='MasterTrainer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(db_index=True, max_length=200)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='trainer_pfps/')),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('mobile_no', models.CharField(blank=True, db_index=True, max_length=20, null=True, verbose_name='Mobile No.')),
                ('aadhaar_no', models.CharField(blank=True, max_length=20, null=True, verbose_name='Aadhaar No')),
                ('empanel_district', models.CharField(blank=True, max_length=255, null=True, verbose_name='Empanel District')),
                ('social_category', models.CharField(blank=True, max_length=50, null=True, verbose_name='Social Category')),
                ('gender', models.CharField(blank=True, max_length=20, null=True)),
                ('education', models.CharField(blank=True, max_length=200, null=True)),
                ('marital_status', models.CharField(blank=True, max_length=50, null=True)),
                ('parent_or_spouse_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Father/Mother/Spouse Name')),
                ('bank_account_number', models.CharField(blank=True, max_length=64, null=True, verbose_name='Account Number')),
                ('ifsc', models.CharField(blank=True, max_length=32, null=True, verbose_name='IFSC')),
                ('branch_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Branch Name')),
                ('bank_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Bank Name')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(blank=True, help_text='Optional link to User account for self-service login', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='master_trainer_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Master Trainer',
                'verbose_name_plural': 'Master Trainers',
            },
        ),
        migrations.CreateModel(
            name='TrainingPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('training_name', models.CharField(max_length=255, verbose_name='Training name')),
                ('theme', models.CharField(blank=True, db_index=True, max_length=200, null=True, verbose_name='Theme')),
                ('theme_expert', models.ForeignKey(blank=True, help_text='Thematic expert user for this training (optional).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='training_plans', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Training Plan',
                'verbose_name_plural': 'Training Plans',
            },
        ),
        migrations.CreateModel(
            name='MasterTrainerSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=200)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('mobile_no', models.CharField(blank=True, max_length=20, null=True, verbose_name='Mobile No.')),
                ('aadhaar_no', models.CharField(blank=True, max_length=20, null=True, verbose_name='Aadhaar No')),
                ('empanel_district', models.CharField(blank=True, max_length=255, null=True, verbose_name='Empanel District')),
                ('social_category', models.CharField(blank=True, max_length=50, null=True, verbose_name='Social Category')),
                ('gender', models.CharField(blank=True, max_length=20, null=True)),
                ('education', models.CharField(blank=True, max_length=200, null=True)),
                ('marital_status', models.CharField(blank=True, max_length=50, null=True)),
                ('parent_or_spouse_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Father/Mother/Spouse Name')),
                ('bank_account_number', models.CharField(blank=True, max_length=64, null=True, verbose_name='Account Number')),
                ('ifsc', models.CharField(blank=True, max_length=32, null=True, verbose_name='IFSC')),
                ('branch_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Branch Name')),
                ('bank_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Bank Name')),
                ('other_achievements', models.TextField(blank=True, null=True, verbose_name='Other Achievements')),
                ('success_stories', models.TextField(blank=True, null=True, verbose_name='Success Stories')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], db_index=True, default='pending', max_length=16)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('rejection_reason', models.TextField(blank=True, null=True)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_submissions', to=settings.AUTH_USER_MODEL)),
                ('trainer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='main.mastertrainer')),
                ('training_plans', models.ManyToManyField(blank=True, related_name='submission_selected_by', to='main.trainingplan')),
            ],
            options={
                'verbose_name': 'Master Trainer Submission',
                'verbose_name_plural': 'Master Trainer Submissions',
                'ordering': ('-submitted_at',),
            },
        ),
        migrations.CreateModel(
            name='MasterTrainerCertificate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('certificate_number', models.CharField(blank=True, max_length=255, null=True, verbose_name='Certificate Number')),
                ('certificate_file', models.FileField(blank=True, null=True, upload_to='trainer_certificates/')),
                ('issuing_authority', models.TextField(blank=True, null=True, verbose_name='Issuing Authority')),
                ('issued_on', models.DateField(blank=True, null=True, verbose_name='Issued on')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('trainer', models.ForeignKey(blank=True, help_text='Optional link to the approved trainer record.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='certificates', to='main.mastertrainer')),
                ('trainer_submission', models.ForeignKey(blank=True, help_text='Certificates uploaded as part of a specific submission.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='certificates', to='main.mastertrainersubmission')),
                ('training_module', models.ForeignKey(blank=True, help_text='Link to the TrainingPlan record for which this certificate was issued (nullable).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='certificates', to='main.trainingplan')),
            ],
            options={
                'verbose_name': 'Master Trainer Certificate',
                'verbose_name_plural': 'Master Trainer Certificates',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='MasterTrainerAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('trainer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='main.mastertrainer')),
                ('training_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assigned_trainers', to='main.trainingplan')),
            ],
            options={
                'verbose_name': 'Master Trainer Assignment',
                'verbose_name_plural': 'Master Trainer Assignments',
            },
        ),
        migrations.AddIndex(
            model_name='mastertrainer',
            index=models.Index(fields=['full_name'], name='main_master_full_na_9f241c_idx'),
        ),
        migrations.AddIndex(
            model_name='mastertrainer',
            index=models.Index(fields=['mobile_no'], name='main_master_mobile__04b997_idx'),
        ),
        migrations.AddIndex(
            model_name='trainingplan',
            index=models.Index(fields=['training_name'], name='main_traini_trainin_46cbe3_idx'),
        ),
        migrations.AddIndex(
            model_name='trainingplan',
            index=models.Index(fields=['theme'], name='main_traini_theme_45eadd_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='mastertrainerassignment',
            unique_together={('trainer', 'training_plan')},
        ),
    ]
